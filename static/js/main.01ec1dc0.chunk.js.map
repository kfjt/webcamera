{"version":3,"sources":["VideoCamera.js","OriginalVideo.js","Keypoints.js","SelectVideo.js","WebCamera.js","App.js","serviceWorker.js","index.js"],"names":["VideoCamera","props","videoEl","deviceId","useEffect","video","current","a","navigator","mediaDevices","getUserMedia","facingMode","srcObject","setVideoStream","ref","OriginalVideo","canvasEl","useRef","canvas","addEventListener","width","videoWidth","height","videoHeight","style","display","play","drawFrame","getContext","drawImage","requestAnimationFrame","className","drawKeypoints","keypoints","ctx","forEach","score","part","position","x","y","beginPath","arc","Math","PI","fillStyle","fill","drawAnonymous","eyesEars","filter","includes","xs","map","ys","xmax","max","xmin","min","ymax","ymin","moveTo","lineTo","Keypoints","posenet","model","tensor","tf","fromPixels","estimateMultiplePoses","flipHorizontal","maxDetections","scoreThreshold","nmsRadius","pose","dispose","pose_filtered","console","log","clearRect","SelectVideo","setDeviceId","selectEl","useState","items","setItems","enumerateDevices","mediaDeviceInfo","videos","it","kind","v","i","value","key","label","unshift","getDevices","onChange","e","target","WebCamera","absolute","top","left","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.01ec1dc0.chunk.js","sourcesContent":["import React, { useEffect } from 'react'\n\nconst VideoCamera = props => {\n  const { videoEl, deviceId } = props\n\n  useEffect(() => {\n    const video = videoEl.current\n    const setVideoStream = async () => {\n      const { mediaDevices } = navigator\n      if (mediaDevices && video !== null) {\n        video.srcObject = await mediaDevices.getUserMedia({ video: { deviceId, facingMode: 'environment' } })\n      }\n    }\n    setVideoStream()\n  }, [videoEl, deviceId])\n\n  return <video ref={videoEl} />\n}\n\nexport default VideoCamera\n","import React, { useRef, useEffect } from 'react'\n\nconst OriginalVideo = props => {\n  const { videoEl } = props\n  const canvasEl = useRef(null)\n\n  useEffect(() => {\n    const video = videoEl.current\n    const canvas = canvasEl.current\n\n    const drawFrame = () => {\n      const ctx = canvas.getContext('2d')\n      ctx.drawImage(video, 0, 0)\n      requestAnimationFrame(drawFrame)\n    }\n\n    video.addEventListener('loadedmetadata', () => {\n      canvas.width = video.videoWidth\n      canvas.height = video.videoHeight\n      video.style.display = 'none'\n    })\n    video.addEventListener('loadeddata', video.play)\n    video.addEventListener('loadeddata', drawFrame)\n  }, [videoEl])\n\n\n  return (<canvas className=\"OriginalVideo\" ref={canvasEl} style={props.style} />)\n}\n\nexport default OriginalVideo\n","import React, { useRef, useEffect } from 'react'\nimport * as posenet from '@tensorflow-models/posenet'\nimport * as tf from '@tensorflow/tfjs'\n\nconst Keypoints = props => {\n  const { videoEl } = props\n  const canvasEl = useRef(null)\n\n  useEffect(() => {\n    const video = videoEl.current\n    const canvas = canvasEl.current\n\n    const drawFrame = async () => {\n      const model = await posenet.load({})\n\n      const ctx = canvas.getContext('2d')\n\n      const tensor = tf.browser.fromPixels(video)\n      const pose = await model.estimateMultiplePoses(tensor, {\n        flipHorizontal: false,\n        maxDetections: 5,\n        scoreThreshold: 0.6,\n        nmsRadius: 20\n      })\n      tensor.dispose()\n      model.dispose()\n\n      const pose_filtered = pose.filter(({ score }) => 0.5 < score)\n      console.log(pose_filtered)\n\n      ctx.clearRect(0, 0, canvas.width, canvas.height)\n      pose_filtered.forEach(({ keypoints }) => drawKeypoints(keypoints, ctx))\n      pose_filtered.forEach(({ keypoints }) => drawAnonymous(keypoints, ctx))\n\n      requestAnimationFrame(drawFrame)\n    }\n\n    video.addEventListener('loadedmetadata', () => {\n      canvas.width = video.videoWidth\n      canvas.height = video.videoHeight\n    })\n    video.addEventListener('loadeddata', drawFrame)\n  }, [videoEl])\n\n\n  return (<canvas className=\"Keypoints\" ref={canvasEl} style={props.style} />)\n}\n\n\nconst drawKeypoints = (keypoints, ctx) => {\n  keypoints.forEach(({ score, part, position }) => {\n    const { x, y } = position\n    ctx.beginPath()\n    ctx.arc(x, y, 3, 0, 2 * Math.PI)\n    ctx.fillStyle = 'red'\n    ctx.fill()\n  })\n}\n\nconst drawAnonymous = (keypoints, ctx) => {\n  const eyesEars = keypoints.filter(({ part }) => ['leftEye', 'rightEye', 'leftEar', 'rightEar'].includes(part))\n  const xs = eyesEars.map(({ position }) => position.x)\n  const ys = eyesEars.map(({ position }) => position.y)\n  const xmax = Math.max(...xs)\n  const xmin = Math.min(...xs)\n  const ymax = Math.max(...ys)\n  const ymin = Math.min(...ys)\n  ctx.beginPath()\n  ctx.moveTo(xmax, ymax)\n  ctx.lineTo(xmax, ymin)\n  ctx.lineTo(xmin, ymin)\n  ctx.lineTo(xmin, ymax)\n  ctx.fillStyle = 'black'\n  ctx.fill()\n\n}\n\nexport default Keypoints\n","import React, { useRef, useState, useEffect } from 'react'\n\nconst SelectVideo = props => {\n  const { setDeviceId } = props\n  const selectEl = useRef()\n  const [items, setItems] = useState([])\n\n  useEffect(() => {\n    const { mediaDevices } = navigator\n    const getDevices = async () => {\n      if (mediaDevices && mediaDevices.enumerateDevices) {\n        const mediaDeviceInfo = await navigator.mediaDevices.enumerateDevices()\n        const videos = mediaDeviceInfo\n          .filter(it => it.kind === 'videoinput')\n          .map((v, i) => <option value={v.deviceId} key={i + 1}>camera {i} {v.label}</option>)\n        videos.unshift(<option key='0'>select device</option>)\n        setItems(videos)\n      }\n    }\n    getDevices()\n  }, [])\n\n  return <select ref={selectEl} onChange={e => setDeviceId(e.target.value)}>{items}</select>\n}\n\nexport default SelectVideo\n","import React, { useRef, useState } from 'react'\n\nimport VideoCamera from './VideoCamera'\nimport OriginalVideo from './OriginalVideo'\nimport Keypoints from './Keypoints'\nimport SelectVideo from './SelectVideo'\n\nconst WebCamera = props => {\n  const { position } = props\n  const videoEl = useRef()\n  const [deviceId, setDeviceId] = useState(null)\n  const relative = { position: 'relative' }\n  const absolute = { position: 'absolute', top: 0, left: 0 }\n\n  if (!deviceId) return (<SelectVideo setDeviceId={setDeviceId} />)\n\n  return (\n    <div className=\"WebCamera\" style={position}>\n      <VideoCamera className=\"Input\" videoEl={videoEl} deviceId={deviceId} />\n      <div className=\"Output\" style={relative} >\n        <OriginalVideo className=\"layer\" style={absolute} videoEl={videoEl} />\n        <Keypoints className=\"layer\" style={absolute} videoEl={videoEl} />\n      </div>\n    </div>\n  )\n}\n\nexport default WebCamera\n","import React from 'react'\nimport './App.css'\n\nimport WebCamera from './WebCamera'\n// import VRScene from './VRScene'\n// import Geolocation from './Geolocation'\n// import ARScene from './ARScene'\n// import {BallModelViewer} from './ModelViewer'\n\nconst App = () => {\n  const relative = { position: 'relative' }\n  const absolute = { position: 'absolute', top: 0, left: 0 }\n  return (\n    <div className=\"App\" style={relative}>\n      {/* <ARScene position={absolute} /> */}\n      <WebCamera position={absolute} />\n      {/* <Geolocation position={absolute} /> */}\n      {/* <VRScene position={absolute} /> */}\n      {/* <BallModelViewer /> */}\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}