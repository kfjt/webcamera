{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","videoEl","useRef","canvasEl","useEffect","video","current","canvas","drawKeypoints","keypoints","ctx","forEach","score","part","position","x","y","beginPath","arc","Math","PI","fillStyle","fill","drawAnonymous","eyesEars","filter","includes","xs","map","ys","xmax","max","xmin","min","ymax","ymin","moveTo","lineTo","drawFrame","a","posenet","net","getContext","drawImage","tensor","tf","fromPixels","estimateMultiplePoses","flipHorizontal","maxDetections","scoreThreshold","nmsRadius","pose","pose_filtered","requestAnimationFrame","navigator","mediaDevices","style","display","getUserMedia","srcObject","onloadedmetadata","width","videoWidth","height","videoHeight","onloadeddata","play","setVideoStream","className","ref","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"yYAuFeA,MAlFf,WACE,IAAMC,EAAUC,iBAAO,MACjBC,EAAWD,iBAAO,MAwExB,OAtEAE,qBAAU,WACR,IAAMC,EAAQJ,EAAQK,QAChBC,EAASJ,EAASG,QAElBE,EAAgB,SAACC,EAAWC,GAChCD,EAAUE,SAAQ,YAA6B,EAA3BC,MAA2B,EAApBC,KAAqB,IAAfC,EAAc,EAAdA,SACxBC,EAAQD,EAARC,EAAGC,EAAKF,EAALE,EACVN,EAAIO,YACJP,EAAIQ,IAAIH,EAAGC,EAAG,EAAG,EAAG,EAAIG,KAAKC,IAC7BV,EAAIW,UAAY,MAChBX,EAAIY,WAIFC,EAAgB,SAACd,EAAWC,GAChC,IAAMc,EAAWf,EAAUgB,QAAO,gBAAEZ,EAAF,EAAEA,KAAF,MAAY,CAAC,UAAW,WAAY,UAAW,YAAYa,SAASb,MAChGc,EAAKH,EAASI,KAAI,qBAAEd,SAAuBC,KAC3Cc,EAAKL,EAASI,KAAI,qBAAEd,SAAuBE,KAC3Cc,EAAOX,KAAKY,IAAL,MAAAZ,KAAI,YAAQQ,IACnBK,EAAOb,KAAKc,IAAL,MAAAd,KAAI,YAAQQ,IACnBO,EAAOf,KAAKY,IAAL,MAAAZ,KAAI,YAAQU,IACnBM,EAAOhB,KAAKc,IAAL,MAAAd,KAAI,YAAQU,IACzBnB,EAAIO,YACJP,EAAI0B,OAAON,EAAMI,GACjBxB,EAAI2B,OAAOP,EAAMK,GACjBzB,EAAI2B,OAAOL,EAAMG,GACjBzB,EAAI2B,OAAOL,EAAME,GACjBxB,EAAIW,UAAY,QAChBX,EAAIY,QAIAgB,EAAS,uCAAG,oCAAAC,EAAA,sEACEC,IAAa,IADf,cACVC,EADU,QAGV/B,EAAMH,EAAOmC,WAAW,OAC1BC,UAAUtC,EAAO,EAAG,GAElBuC,EAASC,IAAWC,WAAWvC,GANrB,SAOGkC,EAAIM,sBAAsBH,EAAQ,CACnDI,gBAAgB,EAChBC,cAAe,EACfC,eAAgB,GAChBC,UAAW,KAXG,OAOVC,EAPU,QAaVC,EAAgBD,EAAK3B,QAAO,kBAAa,GAAb,EAAEb,UAEtBD,SAAQ,gBAAEF,EAAF,EAAEA,UAAF,OAAiBD,EAAcC,EAAWC,MAChE2C,EAAc1C,SAAQ,gBAAEF,EAAF,EAAEA,UAAF,OAAiBc,EAAcd,EAAWC,MAEhE4C,sBAAsBhB,GAlBN,4CAAH,sDAqBK,uCAAG,8BAAAC,EAAA,2DACIgB,YAAjBC,EADa,EACbA,eACsB,OAAVnD,EAFC,uBAGnBA,EAAMoD,MAAMC,QAAU,OAHH,SAIKF,EAAaG,aAAa,CAACtD,OAAO,IAJvC,OAInBA,EAAMuD,UAJa,OAKnBvD,EAAMwD,iBAAmB,WACvBtD,EAAOuD,MAAQzD,EAAM0D,WACrBxD,EAAOyD,OAAS3D,EAAM4D,aAExB5D,EAAM6D,aAAe,kBAAM5B,KAC3BjC,EAAM8D,OAVa,2CAAH,qDAapBC,KACC,IAID,yBAAKC,UAAU,OACb,2BAAOC,IAAKrE,IACZ,4BAAQqE,IAAKnE,MCtECoE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBxB,WACrBA,UAAUyB,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.9f182703.chunk.js","sourcesContent":["import React, {useRef, useEffect} from 'react'\nimport * as posenet from '@tensorflow-models/posenet'\nimport * as tf from '@tensorflow/tfjs'\nimport './App.css'\n\nfunction App() {\n  const videoEl = useRef(null)\n  const canvasEl = useRef(null)\n\n  useEffect(() => {\n    const video = videoEl.current\n    const canvas = canvasEl.current\n\n    const drawKeypoints = (keypoints, ctx) => {\n      keypoints.forEach(({score, part, position}) => {\n        const {x, y} = position\n        ctx.beginPath()\n        ctx.arc(x, y, 3, 0, 2 * Math.PI)\n        ctx.fillStyle = 'red'\n        ctx.fill()\n      })\n    }\n\n    const drawAnonymous = (keypoints, ctx) => {\n      const eyesEars = keypoints.filter(({part}) => ['leftEye', 'rightEye', 'leftEar', 'rightEar'].includes(part))\n      const xs = eyesEars.map(({position}) => position.x)\n      const ys = eyesEars.map(({position}) => position.y)\n      const xmax = Math.max(...xs)\n      const xmin = Math.min(...xs)\n      const ymax = Math.max(...ys)\n      const ymin = Math.min(...ys)\n      ctx.beginPath()\n      ctx.moveTo(xmax, ymax)\n      ctx.lineTo(xmax, ymin)\n      ctx.lineTo(xmin, ymin)\n      ctx.lineTo(xmin, ymax)\n      ctx.fillStyle = 'black'\n      ctx.fill()\n      \n    }\n\n    const drawFrame = async () => {\n      const net = await posenet.load({})\n\n      const ctx = canvas.getContext('2d')\n      ctx.drawImage(video, 0, 0)\n\n      const tensor = tf.browser.fromPixels(canvas)\n      const pose = await net.estimateMultiplePoses(tensor, {\n        flipHorizontal: false,\n        maxDetections: 5,\n        scoreThreshold: 0.6,\n        nmsRadius: 20})\n\n      const pose_filtered = pose.filter(({score}) => 0.5 < score)\n      \n      pose_filtered.forEach(({keypoints}) => drawKeypoints(keypoints, ctx))\n      pose_filtered.forEach(({keypoints}) => drawAnonymous(keypoints, ctx))\n\n      requestAnimationFrame(drawFrame)\n    }\n\n    const setVideoStream = async () => {\n      const { mediaDevices } = navigator\n      if (mediaDevices && video !== null) {\n        video.style.display = 'none'\n        video.srcObject = await mediaDevices.getUserMedia({video: true})\n        video.onloadedmetadata = () => {\n          canvas.width = video.videoWidth\n          canvas.height = video.videoHeight\n        }\n        video.onloadeddata = () => drawFrame()\n        video.play()\n      }\n    }\n    setVideoStream()\n  }, [])\n  \n\n  return (\n    <div className=\"App\">\n      <video ref={videoEl} />\n      <canvas ref={canvasEl} />\n    </div>\n  );\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}