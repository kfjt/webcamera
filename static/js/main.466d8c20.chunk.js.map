{"version":3,"sources":["useVideo.js","OriginalVideo.js","Keypoints.js","WebCamera.js","App.js","serviceWorker.js","index.js"],"names":["useVideo","e","useEffect","video","current","a","navigator","mediaDevices","getUserMedia","srcObject","setVideoStream","OriginalVideo","props","videoEl","canvasEl","useRef","canvas","addEventListener","width","videoWidth","height","videoHeight","style","display","play","drawFrame","getContext","drawImage","requestAnimationFrame","className","ref","drawKeypoints","keypoints","ctx","forEach","score","part","position","x","y","beginPath","arc","Math","PI","fillStyle","fill","drawAnonymous","eyesEars","filter","includes","xs","map","ys","xmax","max","xmin","min","ymax","ymin","moveTo","lineTo","Keypoints","posenet","model","tensor","tf","fromPixels","estimateMultiplePoses","flipHorizontal","maxDetections","scoreThreshold","nmsRadius","pose","dispose","pose_filtered","console","log","clearRect","WebCamera","absolute","top","left","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.466d8c20.chunk.js","sourcesContent":["import {useEffect} from 'react'\n\nconst useVideo = e => {\n  useEffect(() => {\n    const video = e.current\n    const setVideoStream = async () => {\n      const { mediaDevices } = navigator\n      if (mediaDevices && video !== null) {\n        video.srcObject = await mediaDevices.getUserMedia({video: true})\n      }\n    }\n    setVideoStream()\n  }, [e])\n  return e\n}\n\nexport default useVideo\n","import React, {useRef, useEffect} from 'react'\n\nconst OriginalVideo = props => {\n  const {videoEl} = props\n  const canvasEl = useRef(null)\n\n  useEffect(() => {\n    const video = videoEl.current\n    const canvas = canvasEl.current\n\n    const drawFrame = () => {\n      const ctx = canvas.getContext('2d')\n      ctx.drawImage(video, 0, 0)\n      requestAnimationFrame(drawFrame)\n    }\n\n    video.addEventListener('loadedmetadata', () => {\n      canvas.width = video.videoWidth\n      canvas.height = video.videoHeight\n      video.style.display = 'none'\n    })\n    video.addEventListener('loadeddata', video.play)\n    video.addEventListener('loadeddata', drawFrame)\n  }, [videoEl])\n  \n\n  return (<canvas className=\"OriginalVideo\" ref={canvasEl} style={props.style} />)\n}\n\nexport default OriginalVideo\n","import React, {useRef, useEffect} from 'react'\nimport * as posenet from '@tensorflow-models/posenet'\nimport * as tf from '@tensorflow/tfjs'\n\n// TODO: Refresh drawing\nconst Keypoints = props => {\n  const {videoEl} = props\n  const canvasEl = useRef(null)\n\n  useEffect(() => {\n    const video = videoEl.current\n    const canvas = canvasEl.current\n\n    const drawFrame = async () => {\n      const model = await posenet.load({})\n\n      const ctx = canvas.getContext('2d')\n\n      const tensor = tf.browser.fromPixels(video)\n      const pose = await model.estimateMultiplePoses(tensor, {\n        flipHorizontal: false,\n        maxDetections: 5,\n        scoreThreshold: 0.6,\n        nmsRadius: 20})\n      tensor.dispose()\n      model.dispose()\n\n      const pose_filtered = pose.filter(({score}) => 0.5 < score)\n      console.log(pose_filtered)\n\n      ctx.clearRect(0, 0, canvas.width, canvas.height)\n      pose_filtered.forEach(({keypoints}) => drawKeypoints(keypoints, ctx))\n      pose_filtered.forEach(({keypoints}) => drawAnonymous(keypoints, ctx))\n\n      requestAnimationFrame(drawFrame)\n    }\n\n    video.addEventListener('loadedmetadata', () => {\n        canvas.width = video.videoWidth\n        canvas.height = video.videoHeight\n    })\n    video.addEventListener('loadeddata', drawFrame)\n  }, [videoEl])\n  \n\n  return (<canvas className=\"Keypoints\" ref={canvasEl} style={props.style} />)\n}\n\n\nconst drawKeypoints = (keypoints, ctx) => {\n  keypoints.forEach(({ score, part, position }) => {\n    const { x, y } = position\n    ctx.beginPath()\n    ctx.arc(x, y, 3, 0, 2 * Math.PI)\n    ctx.fillStyle = 'red'\n    ctx.fill()\n  })\n}\n\nconst drawAnonymous = (keypoints, ctx) => {\n  const eyesEars = keypoints.filter(({ part }) => ['leftEye', 'rightEye', 'leftEar', 'rightEar'].includes(part))\n  const xs = eyesEars.map(({ position }) => position.x)\n  const ys = eyesEars.map(({ position }) => position.y)\n  const xmax = Math.max(...xs)\n  const xmin = Math.min(...xs)\n  const ymax = Math.max(...ys)\n  const ymin = Math.min(...ys)\n  ctx.beginPath()\n  ctx.moveTo(xmax, ymax)\n  ctx.lineTo(xmax, ymin)\n  ctx.lineTo(xmin, ymin)\n  ctx.lineTo(xmin, ymax)\n  ctx.fillStyle = 'black'\n  ctx.fill()\n\n}\n\nexport default Keypoints\n","import React, {useRef} from 'react'\n\nimport useVideo from './useVideo'\nimport OriginalVideo from './OriginalVideo'\nimport Keypoints from './Keypoints'\n\nconst WebCamera = () => {\n  const video = useRef(null)\n  useVideo(video)\n\n  const absolute = { position: 'absolute', top: 0, left: 0 }\n  return (\n    <div className=\"WebCamera\">\n      <video className=\"Input\" ref={video} />\n      <div className=\"Output\" style={{position: 'relative'}} >\n        <OriginalVideo className=\"layer\" style={absolute} videoEl={video} />\n        <Keypoints className=\"layer\" style={absolute} videoEl={video} />\n      </div>\n    </div>\n  )\n}\n\nexport default WebCamera\n","import React from 'react'\nimport './App.css'\n\nimport WebCamera from './WebCamera'\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <WebCamera />\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}