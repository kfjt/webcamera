{"version":3,"sources":["useVideo.js","OriginalVideo.js","Keypoints.js","WebCamera.js","VRScene.js","Geolocation.js","App.js","serviceWorker.js","index.js"],"names":["useVideo","e","useEffect","video","current","a","navigator","mediaDevices","getUserMedia","facingMode","srcObject","setVideoStream","OriginalVideo","props","videoEl","canvasEl","useRef","canvas","addEventListener","width","videoWidth","height","videoHeight","style","display","play","drawFrame","getContext","drawImage","requestAnimationFrame","className","ref","drawKeypoints","keypoints","ctx","forEach","score","part","position","x","y","beginPath","arc","Math","PI","fillStyle","fill","drawAnonymous","eyesEars","filter","includes","xs","map","ys","xmax","max","xmin","min","ymax","ymin","moveTo","lineTo","Keypoints","posenet","model","tensor","tf","fromPixels","estimateMultiplePoses","flipHorizontal","maxDetections","scoreThreshold","nmsRadius","pose","dispose","pose_filtered","console","log","length","clearRect","WebCamera","absolute","top","left","VRScene","geometry","primitive","material","color","z","light","type","gltf-model","src","text","value","Geolocation","useState","coords","setCoords","geolocation","getCoords","info","accuracy","latitude","longitude","getCurrentPosition","error","timerId","setInterval","clearInterval","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"qXAgBeA,EAdE,SAAAC,GAWf,OAVAC,qBAAU,WACR,IAAMC,EAAQF,EAAEG,SACI,uCAAG,8BAAAC,EAAA,2DACIC,YAAjBC,EADa,EACbA,eACsB,OAAVJ,EAFC,gCAGKI,EAAaC,aAAa,CAAEL,MAAO,CAAEM,WAAY,iBAHtD,OAGnBN,EAAMO,UAHa,kDAAH,qDAMpBC,KACC,CAACV,IACGA,GCgBMW,EA3BO,SAAAC,GAAU,IACtBC,EAAYD,EAAZC,QACFC,EAAWC,iBAAO,MAsBxB,OApBAd,qBAAU,WACR,IAAMC,EAAQW,EAAQV,QAChBa,EAASF,EAASX,QAQxBD,EAAMe,iBAAiB,kBAAkB,WACvCD,EAAOE,MAAQhB,EAAMiB,WACrBH,EAAOI,OAASlB,EAAMmB,YACtBnB,EAAMoB,MAAMC,QAAU,UAExBrB,EAAMe,iBAAiB,aAAcf,EAAMsB,MAC3CtB,EAAMe,iBAAiB,cAZL,SAAZQ,IACQT,EAAOU,WAAW,MAC1BC,UAAUzB,EAAO,EAAG,GACxB0B,sBAAsBH,QAUvB,CAACZ,IAGI,4BAAQgB,UAAU,gBAAgBC,IAAKhB,EAAUQ,MAAOV,EAAMU,S,uBCuBlES,EAAgB,SAACC,EAAWC,GAChCD,EAAUE,SAAQ,YAA+B,EAA5BC,MAA4B,EAArBC,KAAsB,IAAhBC,EAAe,EAAfA,SACxBC,EAASD,EAATC,EAAGC,EAAMF,EAANE,EACXN,EAAIO,YACJP,EAAIQ,IAAIH,EAAGC,EAAG,EAAG,EAAG,EAAIG,KAAKC,IAC7BV,EAAIW,UAAY,MAChBX,EAAIY,WAIFC,EAAgB,SAACd,EAAWC,GAChC,IAAMc,EAAWf,EAAUgB,QAAO,gBAAGZ,EAAH,EAAGA,KAAH,MAAc,CAAC,UAAW,WAAY,UAAW,YAAYa,SAASb,MAClGc,EAAKH,EAASI,KAAI,qBAAGd,SAAwBC,KAC7Cc,EAAKL,EAASI,KAAI,qBAAGd,SAAwBE,KAC7Cc,EAAOX,KAAKY,IAAL,MAAAZ,KAAI,YAAQQ,IACnBK,EAAOb,KAAKc,IAAL,MAAAd,KAAI,YAAQQ,IACnBO,EAAOf,KAAKY,IAAL,MAAAZ,KAAI,YAAQU,IACnBM,EAAOhB,KAAKc,IAAL,MAAAd,KAAI,YAAQU,IACzBnB,EAAIO,YACJP,EAAI0B,OAAON,EAAMI,GACjBxB,EAAI2B,OAAOP,EAAMK,GACjBzB,EAAI2B,OAAOL,EAAMG,GACjBzB,EAAI2B,OAAOL,EAAME,GACjBxB,EAAIW,UAAY,QAChBX,EAAIY,QAISgB,EAzEG,SAAAjD,GAAU,IAClBC,EAAYD,EAAZC,QACFC,EAAWC,iBAAO,MAuCxB,OArCAd,qBAAU,WACR,IAAMC,EAAQW,EAAQV,QAChBa,EAASF,EAASX,QAElBsB,EAAS,uCAAG,oCAAArB,EAAA,sEACI0D,IAAa,IADjB,cACVC,EADU,OAGV9B,EAAMjB,EAAOU,WAAW,MAExBsC,EAASC,IAAWC,WAAWhE,GALrB,SAMG6D,EAAMI,sBAAsBH,EAAQ,CACrDI,gBAAgB,EAChBC,cAAe,EACfC,eAAgB,GAChBC,UAAW,KAVG,OAMVC,EANU,OAYhBR,EAAOS,UACPV,EAAMU,UAEAC,EAAgBF,EAAKxB,QAAO,kBAAe,GAAf,EAAGb,SACrCwC,QAAQC,IAAIF,GAERA,EAAcG,QAAQ5C,EAAI6C,UAAU,EAAG,EAAG9D,EAAOE,MAAOF,EAAOI,QACnEsD,EAAcxC,SAAQ,gBAAGF,EAAH,EAAGA,UAAH,OAAmBD,EAAcC,EAAWC,MAClEyC,EAAcxC,SAAQ,gBAAGF,EAAH,EAAGA,UAAH,OAAmBc,EAAcd,EAAWC,MAElEL,sBAAsBH,GAtBN,4CAAH,qDAyBfvB,EAAMe,iBAAiB,kBAAkB,WACvCD,EAAOE,MAAQhB,EAAMiB,WACrBH,EAAOI,OAASlB,EAAMmB,eAExBnB,EAAMe,iBAAiB,aAAcQ,KACpC,CAACZ,IAGI,4BAAQgB,UAAU,YAAYC,IAAKhB,EAAUQ,MAAOV,EAAMU,SCvBrDyD,EAhBG,SAAAnE,GAChB,IAAMV,EAAQa,iBAAO,MACrBhB,EAASG,GAET,IAAM8E,EAAW,CAAE3C,SAAU,WAAY4C,IAAK,EAAGC,KAAM,GACvD,OACE,yBAAKrD,UAAU,YAAYP,MAAOV,EAAMU,OACtC,2BAAOO,UAAU,QAAQC,IAAK5B,IAC9B,yBAAK2B,UAAU,SAASP,MAAO,CAAEe,SAAU,aACzC,kBAAC,EAAD,CAAeR,UAAU,QAAQP,MAAO0D,EAAUnE,QAASX,IAC3D,kBAAC,EAAD,CAAW2B,UAAU,QAAQP,MAAO0D,EAAUnE,QAASX,O,eCDhDiF,EAXC,SAAAvE,GACd,OACE,kBAAC,QAAD,CAAOU,MAAOV,EAAMU,OAClB,kBAAC,SAAD,CAAQ8D,SAAU,CAAEC,UAAW,OAASC,SAAU,CAAEC,MAAO,OAASlD,SAAU,CAAEC,EAAG,EAAGC,EAAG,EAAGiD,GAAI,KAChG,kBAAC,SAAD,CAAQC,MAAO,CAAEC,KAAM,WACvB,kBAAC,SAAD,CAAQC,aAAY,CAAEC,IAAK,sBAC3B,kBAAC,SAAD,CAAQC,KAAM,CAAEC,MAAO,qB,QCmBdC,EA3BK,SAAAnF,GAAU,IAAD,EACCoF,mBAAS,IADV,mBACpBC,EADoB,KACZC,EADY,KAGnBC,EAAgB9F,UAAhB8F,YAEFC,EAAY,SAAC,GAAgB,IAAdH,EAAa,EAAbA,OACnBtB,QAAQ0B,KAAKJ,GADmB,IAExBK,EAAkCL,EAAlCK,SAAUC,EAAwBN,EAAxBM,SAAUC,EAAcP,EAAdO,UAC5BN,EAAU,CAAEI,WAAUC,WAAUC,eAUlC,OAPAvG,qBAAU,WACJkG,GAAeA,EAAYM,oBAC7BN,EAAYM,mBAAmBL,EAAWzB,QAAQ+B,OACpD,IAAMC,EAAUC,aAAY,kBAAMT,EAAYM,mBAAmBL,EAAWzB,QAAQ+B,SAAQ,KAC5F,OAAO,kBAAMG,cAAcF,MAC1B,CAACR,IAGF,yBAAKtE,UAAU,cAAcP,MAAOV,EAAMU,OACxC,gDAAmB2E,EAAOK,WAC1B,gDAAmBL,EAAOM,WAC1B,iDAAoBN,EAAOO,cCPlBM,EAVH,WACV,OACE,yBAAKjF,UAAU,MAAMP,MAAO,CAAEe,SAAU,aACtC,kBAAC,EAAD,CAAWf,MAAO,CAAEe,SAAU,cAC9B,kBAAC,EAAD,CAAaf,MAAO,CAAEe,SAAU,cAChC,kBAAC,EAAD,CAASf,MAAO,CAAEe,SAAU,gBCAd0E,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBlH,WACrBA,UAAUmH,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.afed375c.chunk.js","sourcesContent":["import { useEffect } from 'react'\n\nconst useVideo = e => {\n  useEffect(() => {\n    const video = e.current\n    const setVideoStream = async () => {\n      const { mediaDevices } = navigator\n      if (mediaDevices && video !== null) {\n        video.srcObject = await mediaDevices.getUserMedia({ video: { facingMode: 'environment' } })\n      }\n    }\n    setVideoStream()\n  }, [e])\n  return e\n}\n\nexport default useVideo\n","import React, { useRef, useEffect } from 'react'\n\nconst OriginalVideo = props => {\n  const { videoEl } = props\n  const canvasEl = useRef(null)\n\n  useEffect(() => {\n    const video = videoEl.current\n    const canvas = canvasEl.current\n\n    const drawFrame = () => {\n      const ctx = canvas.getContext('2d')\n      ctx.drawImage(video, 0, 0)\n      requestAnimationFrame(drawFrame)\n    }\n\n    video.addEventListener('loadedmetadata', () => {\n      canvas.width = video.videoWidth\n      canvas.height = video.videoHeight\n      video.style.display = 'none'\n    })\n    video.addEventListener('loadeddata', video.play)\n    video.addEventListener('loadeddata', drawFrame)\n  }, [videoEl])\n\n\n  return (<canvas className=\"OriginalVideo\" ref={canvasEl} style={props.style} />)\n}\n\nexport default OriginalVideo\n","import React, { useRef, useEffect } from 'react'\nimport * as posenet from '@tensorflow-models/posenet'\nimport * as tf from '@tensorflow/tfjs'\n\nconst Keypoints = props => {\n  const { videoEl } = props\n  const canvasEl = useRef(null)\n\n  useEffect(() => {\n    const video = videoEl.current\n    const canvas = canvasEl.current\n\n    const drawFrame = async () => {\n      const model = await posenet.load({})\n\n      const ctx = canvas.getContext('2d')\n\n      const tensor = tf.browser.fromPixels(video)\n      const pose = await model.estimateMultiplePoses(tensor, {\n        flipHorizontal: false,\n        maxDetections: 5,\n        scoreThreshold: 0.6,\n        nmsRadius: 20\n      })\n      tensor.dispose()\n      model.dispose()\n\n      const pose_filtered = pose.filter(({ score }) => 0.5 < score)\n      console.log(pose_filtered)\n\n      if (pose_filtered.length) ctx.clearRect(0, 0, canvas.width, canvas.height)\n      pose_filtered.forEach(({ keypoints }) => drawKeypoints(keypoints, ctx))\n      pose_filtered.forEach(({ keypoints }) => drawAnonymous(keypoints, ctx))\n\n      requestAnimationFrame(drawFrame)\n    }\n\n    video.addEventListener('loadedmetadata', () => {\n      canvas.width = video.videoWidth\n      canvas.height = video.videoHeight\n    })\n    video.addEventListener('loadeddata', drawFrame)\n  }, [videoEl])\n\n\n  return (<canvas className=\"Keypoints\" ref={canvasEl} style={props.style} />)\n}\n\n\nconst drawKeypoints = (keypoints, ctx) => {\n  keypoints.forEach(({ score, part, position }) => {\n    const { x, y } = position\n    ctx.beginPath()\n    ctx.arc(x, y, 3, 0, 2 * Math.PI)\n    ctx.fillStyle = 'red'\n    ctx.fill()\n  })\n}\n\nconst drawAnonymous = (keypoints, ctx) => {\n  const eyesEars = keypoints.filter(({ part }) => ['leftEye', 'rightEye', 'leftEar', 'rightEar'].includes(part))\n  const xs = eyesEars.map(({ position }) => position.x)\n  const ys = eyesEars.map(({ position }) => position.y)\n  const xmax = Math.max(...xs)\n  const xmin = Math.min(...xs)\n  const ymax = Math.max(...ys)\n  const ymin = Math.min(...ys)\n  ctx.beginPath()\n  ctx.moveTo(xmax, ymax)\n  ctx.lineTo(xmax, ymin)\n  ctx.lineTo(xmin, ymin)\n  ctx.lineTo(xmin, ymax)\n  ctx.fillStyle = 'black'\n  ctx.fill()\n\n}\n\nexport default Keypoints\n","import React, { useRef } from 'react'\n\nimport useVideo from './useVideo'\nimport OriginalVideo from './OriginalVideo'\nimport Keypoints from './Keypoints'\n\nconst WebCamera = props => {\n  const video = useRef(null)\n  useVideo(video)\n\n  const absolute = { position: 'absolute', top: 0, left: 0 }\n  return (\n    <div className=\"WebCamera\" style={props.style}>\n      <video className=\"Input\" ref={video} />\n      <div className=\"Output\" style={{ position: 'relative' }} >\n        <OriginalVideo className=\"layer\" style={absolute} videoEl={video} />\n        <Keypoints className=\"layer\" style={absolute} videoEl={video} />\n      </div>\n    </div>\n  )\n}\n\nexport default WebCamera\n","import React from 'react';\nimport 'aframe';\nimport { Entity, Scene } from 'aframe-react';\n\nconst VRScene = props => {\n  return (\n    <Scene style={props.style}>\n      <Entity geometry={{ primitive: 'box' }} material={{ color: 'red' }} position={{ x: 0, y: 0, z: -5 }} />\n      <Entity light={{ type: 'point' }} />\n      <Entity gltf-model={{ src: 'virtualcity.gltf' }} />\n      <Entity text={{ value: 'Hello, WebVR!' }} />\n    </Scene>\n  )\n}\n\nexport default VRScene;\n","import React, { useState, useEffect } from 'react'\n\nconst Geolocation = props => {\n  const [coords, setCoords] = useState({})\n\n  const { geolocation } = navigator\n\n  const getCoords = ({ coords }) => {\n    console.info(coords)\n    const { accuracy, latitude, longitude } = coords\n    setCoords({ accuracy, latitude, longitude })\n  }\n\n  useEffect(() => {\n    if (geolocation && geolocation.getCurrentPosition)\n      geolocation.getCurrentPosition(getCoords, console.error)\n    const timerId = setInterval(() => geolocation.getCurrentPosition(getCoords, console.error), 1000)\n    return () => clearInterval(timerId)\n  }, [geolocation])\n\n  return (\n    <div className=\"geolocation\" style={props.style}>\n      <div >{`accuracy:${coords.accuracy}`}</div>\n      <div >{`latitude:${coords.latitude}`}</div>\n      <div >{`longitude:${coords.longitude}`}</div>\n    </div>\n  )\n}\n\nexport default Geolocation\n","import React from 'react'\nimport './App.css'\n\nimport WebCamera from './WebCamera'\nimport VRScene from './VRScene'\nimport Geolocation from './Geolocation'\n\nconst App = () => {\n  return (\n    <div className=\"App\" style={{ position: 'relative' }}>\n      <WebCamera style={{ position: 'absolute' }} />\n      <Geolocation style={{ position: 'absolute' }} />\n      <VRScene style={{ position: 'absolute' }} />\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}