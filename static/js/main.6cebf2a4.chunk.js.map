{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","videoEl","useRef","canvasEl","useEffect","video","current","canvas","a","navigator","mediaDevices","style","display","getUserMedia","stream","srcObject","play","setVideoStream","drawFrame","videoWidth","videoHeight","width","height","ctx","getContext","clearRect","drawImage","requestAnimationFrame","className","ref","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"uQA6CeA,MA1Cf,WACE,IAAMC,EAAUC,iBAAO,MACjBC,EAAWD,iBAAO,MAgCxB,OA9BAE,qBAAU,WACR,IAAMC,EAAQJ,EAAQK,QAChBC,EAASJ,EAASG,SAEJ,uCAAG,gCAAAE,EAAA,2DACIC,YAAjBC,EADa,EACbA,eACsB,OAAVL,EAFC,uBAGnBA,EAAMM,MAAMC,QAAU,OAHH,SAIEF,EAAaG,aAAa,CAACR,OAAO,IAJpC,OAIbS,EAJa,OAKnBT,EAAMU,UAAYD,EAClBT,EAAMW,OANa,2CAAH,qDASpBC,IAEkB,SAAZC,IACJ,IAAMC,EAAad,EAAMc,WACnBC,EAAcf,EAAMe,YAC1Bb,EAAOc,MAAQF,EACfZ,EAAOe,OAASF,EAEhB,IAAMG,EAAMhB,EAAOiB,WAAW,MAC9BD,EAAIE,UAAU,EAAG,EAAGN,EAAYC,GAChCG,EAAIG,UAAUrB,EAAO,EAAG,EAAGc,EAAYC,GACvCO,sBAAsBT,GAExBA,KACC,IAID,yBAAKU,UAAU,OACb,2BAAOC,IAAK5B,IACZ,4BAAQ4B,IAAK1B,MC5BC2B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmB7B,WACrBA,UAAU8B,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.6cebf2a4.chunk.js","sourcesContent":["import React, {useRef, useEffect} from 'react'\nimport './App.css'\n\nfunction App() {\n  const videoEl = useRef(null)\n  const canvasEl = useRef(null)\n\n  useEffect(() => {\n    const video = videoEl.current\n    const canvas = canvasEl.current\n\n    const setVideoStream = async () => {\n      const { mediaDevices } = navigator\n      if (mediaDevices && video !== null) {\n        video.style.display = 'none'\n        const stream = await mediaDevices.getUserMedia({video: true})\n        video.srcObject = stream\n        video.play()\n      }\n    }\n    setVideoStream()\n\n    const drawFrame = () => {\n      const videoWidth = video.videoWidth\n      const videoHeight = video.videoHeight\n      canvas.width = videoWidth\n      canvas.height = videoHeight\n\n      const ctx = canvas.getContext('2d')\n      ctx.clearRect(0, 0, videoWidth, videoHeight);\n      ctx.drawImage(video, 0, 0, videoWidth, videoHeight)\n      requestAnimationFrame(drawFrame)\n    }\n    drawFrame()\n  }, [])\n  \n\n  return (\n    <div className=\"App\">\n      <video ref={videoEl} />\n      <canvas ref={canvasEl} />\n    </div>\n  );\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}